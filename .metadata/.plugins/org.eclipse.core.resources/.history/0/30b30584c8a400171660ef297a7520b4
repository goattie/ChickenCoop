package coopCore;

//import coopDataStructures.CoopConfig;
import coopDataStructures.CoopConfig;
import coopIntegration.CameraFunctions;
import coopIntegration.CameraFunctionsImpl;
import coopIntegration.ChickenSounds;
import coopIntegration.ChickenSoundsImpl;
import coopIntegration.CoopFileReader;
import coopIntegration.DBConnector;
import coopIntegration.DBConnectorImpl;
import coopIntegration.DoorFunctions;
import coopIntegration.DoorFunctionsImpl;
import coopIntegration.Humidity;
import coopIntegration.HumidityImpl;
//import coopIntegration.MySqlPoolableObjectFactory;
//import coopIntegration.SqlPoolConnectionControl;
import coopIntegration.TemperatureSensor;
import coopIntegration.TemperatureSensorImpl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Calendar;
//import org.apache.commons.pool.ObjectPool;
//import org.apache.commons.pool.PoolableObjectFactory;
//import org.apache.commons.pool.impl.GenericObjectPool;
//import org.apache.commons.pool.impl.GenericObjectPool.Config;
//import org.apache.commons.pool.impl.GenericObjectPoolFactory;
import java.util.TimeZone;


public class CoopDriver {

	//saving code for possibly using db connection pooling
//	@SuppressWarnings("rawtypes")
//	private static ObjectPool initMySqlConnectionPool() {
//        Properties properties = new Properties();
//        properties.load(Boot.class.getClassLoader().getResourceAsStream("config.properties"));
//       
//        String host = properties.getProperty("host");
//        String port = properties.getProperty("port");
//        String schema = properties.getProperty("schema");
//        String user = properties.getProperty("user");
//        String password = properties.getProperty("password");
//
//        @SuppressWarnings("rawtypes")
//		PoolableObjectFactory mySqlPoolableObjectFactory = new MySqlPoolableObjectFactory(host,
//             Integer.parseInt(port), schema, user, password);
//        Config config = new GenericObjectPool.Config();
//          config.maxActive = 10;
//          config.testOnBorrow = true;
//          config.testWhileIdle = true;
//          config.timeBetweenEvictionRunsMillis = 10000;
//          config.minEvictableIdleTimeMillis = 60000;
//
//        @SuppressWarnings({ "rawtypes", "unchecked" })
//		GenericObjectPoolFactory genericObjectPoolFactory = new GenericObjectPoolFactory(mySqlPoolableObjectFactory, config);
//        pool = genericObjectPoolFactory.createPool();
//        return pool;
//   }
//	
//	
//	public static void main (String args[]) {
//		ObjectPool pool;
//        pool = initMySqlConnectionPool();
//        SqlPoolConnectionControl exampleClassUsesMySQLConnectionPool
//             = new SqlPoolConnectionControl(pool);
//		
//	}

	public static void main (String args[]) {
		//define sunrise and sunset
		Calendar sunrise;
		Calendar sunset;		
		int x = 1;
		int picTimeCounter = 0;
		
		while(x==1) {
						
			//get current time
			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH-mm-ss");
			dateFormat.setTimeZone(TimeZone.getTimeZone( "GMT-5")); 
			Calendar newCal = Calendar.getInstance();
			
			//get database connection
			Connection newConnection = null;
			DBConnector dbConnector = new DBConnectorImpl();
			newConnection = dbConnector.getConnection();			
			
			//save config entry to config object
			String configSql = "SELECT sunrise_preset, sunset_preset, mp3_open, mp3_close, open_door, "+
					"close_door, door_status_open, pic_location, pic_interval FROM COOP_CONFIG";
			CoopConfig config = null;
			PreparedStatement configPS;
			try {
				configPS = newConnection.prepareStatement(configSql);
				ResultSet configResultSet=configPS.executeQuery(configSql);
				config = new CoopConfig(configResultSet.getString(1), configResultSet.getString(2), 
						configResultSet.getString(3), configResultSet.getString(4), configResultSet.getBoolean(5), 
						configResultSet.getBoolean(6), configResultSet.getBoolean(7),
						configResultSet.getString(8), configResultSet.getInt(9));  
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			//camera functions
			CameraFunctions cameraFunction = new CameraFunctionsImpl();
			if(picTimeCounter == 0) {
				cameraFunction.takePicture("Coop Pic "+dateFormat.format(newCal.getTime()));				
				picTimeCounter = config.getPicTimeInterval();
			}
			picTimeCounter--;
			cameraFunction = null;
						
			
			//define doorFunctions;
			DoorFunctions doorFunctions = new DoorFunctionsImpl();
			
			
			//play sound for Chickens before Door Opens or Closes
			ChickenSounds playSounds = new ChickenSoundsImpl();
			if(returnDateCompare(config.getSunrisePreset(), currentDate.toString()) && !config.isDoorIspOpen()) {
				playSounds.playOpenSound(config.getMp3Open());
			} else if(returnDateCompare(config.getSunsetPreset(), currentDate.toString()) && config.isDoorIspOpen()) {
				playSounds.playCloseSound(config.getMp3Close());
			}
			
			//check to see if user selected to open or close door
			if(config.isCloseDoor()==true && config.isDoorIspOpen()==true) {
				doorFunctions.closeDoor();				
				updateDoorStatus(false, newConnection);
			} else if(config.isOpenDoor()==true && config.isDoorIspOpen()==false) {
				doorFunctions.openDoor();
				updateDoorStatus(true, newConnection);
			} else if(returnDateCompare(currentDate.toString(), config.getSunrisePreset()) && config.isCloseDoor()) {
				doorFunctions.openDoor();
				updateDoorStatus(true, newConnection);
			} else if(returnDateCompare(currentDate.toString(), config.getSunsetPreset()) && !config.isCloseDoor()) {
				doorFunctions.closeDoor();
				updateDoorStatus(false, newConnection);
			} 
			
			
			//take humitidy and store
			saveHumidity(newConnection, currentDate);
			
			//take temp and store
			saveTemperature(newConnection, currentDate);			
			
			try {
				newConnection.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
						try {
				Thread.sleep(60000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
	
	public static boolean returnDateCompare(Calendar calendar1, Calendar calendar2) {
		if(calendar1.after(calendar2)) {
			return true;
		} else {
			return false;
		}
	}
	
	public static boolean returnDateCompare(String date1, String date2) {
		 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		 Date firstDate = null;
		 Date secondDate = null;
		try {
			firstDate = sdf.parse(date1);
			secondDate = sdf.parse(date2);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		 
		 if(firstDate.after(secondDate)) {
			 return true;			 
		 } else {
			 return false;
		 }
	}
	
	public static void updateDoorStatus(boolean setDoorStatus, Connection connection) {
		//save config entry to config object
		String configSql = "UPDATE COOP_CONFIG SET door_open_status="+setDoorStatus;
		PreparedStatement doorStatusPS;
		try {
			doorStatusPS = connection.prepareStatement(configSql);
			doorStatusPS.executeQuery(configSql);			 
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void saveHumidity(Connection connection, Date currentDate) {
		Humidity newHumidity = new HumidityImpl();
		String humitidySql = "INSERT "+newHumidity.getHumidity()+","+currentDate.toString()+"INTO HUMIDITY";
		PreparedStatement humidityPS;
		try {
			humidityPS = connection.prepareStatement(humitidySql);
			humidityPS.executeQuery(humitidySql);			 
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void saveTemperature(Connection connection, Date currentDate) {
		TemperatureSensor newTemp= new TemperatureSensorImpl();
		String tempSql = "INSERT "+newTemp.getTemperature()+","+currentDate.toString()+"INTO TEMP";
		PreparedStatement tempPS;
		try {
			tempPS = connection.prepareStatement(tempSql);
			tempPS.executeQuery(tempSql);			 
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
}
